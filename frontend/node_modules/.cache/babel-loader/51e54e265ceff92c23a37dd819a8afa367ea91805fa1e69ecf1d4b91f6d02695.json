{"ast":null,"code":"var _jsxFileName = \"G:\\\\OneDrive\\\\Desktop\\\\job-fair\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport './App.css';\nimport { scales } from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState({\n    customers: [],\n    transactions: []\n  });\n  const [filter, setFilter] = useState({\n    customerName: '',\n    transactionAmount: ''\n  });\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    axios.get('http://localhost:5001/api/data').then(response => setData(response.data)).catch(error => console.error('Error fetching data:', error));\n  }, []);\n  useEffect(() => {\n    if (selectedCustomer) {\n      const customerTransactions = data.transactions.filter(transaction => transaction.customer_id === selectedCustomer.id);\n      const groupedByDate = customerTransactions.reduce((acc, transaction) => {\n        acc[transaction.date] = (acc[transaction.date] || 0) + transaction.amount;\n        return acc;\n      }, {});\n\n      // setChartData({\n      //     labels: Object.keys(groupedByDate),\n      //     datasets: [{\n      //         label: 'Total Transaction Amount',\n      //         data: Object.values(groupedByDate),\n      //         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n      //         borderColor: 'rgba(75, 192, 192, 1)',\n      //         borderWidth: 1\n      //     }]\n      // });\n\n      // setChartData({\n      //     labels: Object.keys(groupedByDate),\n      //     datasets: [{\n      //         label: 'Total Transaction Amount',\n      //         data: Object.values(groupedByDate),\n      //         backgroundColor: 'rgba(75,192,192, 0.6)',\n      //         borderColor: 'rgba(75,192,192,1)',\n      //         borderWidth: 1,\n      //         pointBackgroundColor: 'rgba(75,192,192,1)',\n      //         pointBordeerColor: '#fff',\n      //         PointHoverBackgroundColor: '#fff',\n      //         pointHoverBordeerColor: 'rgba(75,192,192,1)',\n      //     }] \n      // });\n      setChartData({\n        labels: Object.keys(groupedByDate),\n        datasets: [{\n          label: 'Total Transaction Amount',\n          data: Object.values(groupedByDate),\n          backgroundColor: 'rgba(75,192,192, 0.6)',\n          borderColor: 'rgba(75,192,192,1)',\n          borderWidth: 1,\n          pointBackgroundColor: 'rgba(75,192,192,1)',\n          pointBordeerColor: '#fff',\n          PointHoverBackgroundColor: '#fff',\n          pointHoverBordeerColor: 'rgba(75,192,192,1)'\n        }]\n      });\n      setChartOptions({\n        scales: {\n          y: {}\n        }\n      });\n    }\n  }, [selectedCustomer, data.transactions]);\n  const handleFilterChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFilter({\n      ...filter,\n      [name]: value\n    });\n  };\n  const filteredCustomers = data.customers.filter(customer => customer.name.toLowerCase().includes(filter.customerName.toLowerCase()));\n  const filteredTransactions = data.transactions.filter(transaction => filter.transactionAmount === '' || transaction.amount === Number(filter.transactionAmount));\n  const handleCustomerClick = customer => {\n    setSelectedCustomer(customer);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Customer Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"customerinput\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"customerName\",\n        placeholder: \"Filter by customer name\",\n        value: filter.customerName,\n        onChange: handleFilterChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"transactionAmount\",\n        placeholder: \"Filter by transaction amount\",\n        value: filter.transactionAmount,\n        onChange: handleFilterChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Customer Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Transaction Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Transaction Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: filteredCustomers.map(customer => filteredTransactions.filter(transaction => transaction.customer_id === customer.id).map(transaction => /*#__PURE__*/_jsxDEV(\"tr\", {\n          onClick: () => handleCustomerClick(customer),\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: customer.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 35\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: transaction.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 35\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: transaction.amount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 35\n          }, this)]\n        }, transaction.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 31\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }, this), selectedCustomer && chartData.labels && chartData.datasets ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Transactions for \", selectedCustomer.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 15\n    }, this) : selectedCustomer && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data\",\n      children: \"No data available for the selected customer.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 35\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"xKlaG/tewSVn3zYeBeWjSUiraJg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","Line","scales","jsxDEV","_jsxDEV","App","_s","data","setData","customers","transactions","filter","setFilter","customerName","transactionAmount","selectedCustomer","setSelectedCustomer","chartData","setChartData","get","then","response","catch","error","console","customerTransactions","transaction","customer_id","id","groupedByDate","reduce","acc","date","amount","labels","Object","keys","datasets","label","values","backgroundColor","borderColor","borderWidth","pointBackgroundColor","pointBordeerColor","PointHoverBackgroundColor","pointHoverBordeerColor","setChartOptions","y","handleFilterChange","e","name","value","target","filteredCustomers","customer","toLowerCase","includes","filteredTransactions","Number","handleCustomerClick","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","onChange","map","onClick","_c","$RefreshReg$"],"sources":["G:/OneDrive/Desktop/job-fair/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport {  Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport './App.css'\nimport { scales } from 'chart.js/auto';\nfunction App() {\n    const [data, setData] = useState({ customers: [], transactions: [] });\n    const [filter, setFilter] = useState({ customerName: '', transactionAmount: '' });\n    const [selectedCustomer, setSelectedCustomer] = useState(null);\n    const [chartData, setChartData] = useState({});\n\n    useEffect(() => {\n        axios.get('http://localhost:5001/api/data')\n            .then(response => setData(response.data))\n            .catch(error => console.error('Error fetching data:', error));\n    }, []);\n\n    useEffect(() => {\n        if (selectedCustomer) {\n            const customerTransactions = data.transactions.filter(transaction => transaction.customer_id === selectedCustomer.id);\n            const groupedByDate = customerTransactions.reduce((acc, transaction) => {\n                acc[transaction.date] = (acc[transaction.date] || 0) + transaction.amount;\n                return acc;\n            }, {});\n\n            // setChartData({\n            //     labels: Object.keys(groupedByDate),\n            //     datasets: [{\n            //         label: 'Total Transaction Amount',\n            //         data: Object.values(groupedByDate),\n            //         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n            //         borderColor: 'rgba(75, 192, 192, 1)',\n            //         borderWidth: 1\n            //     }]\n            // });\n\n            // setChartData({\n            //     labels: Object.keys(groupedByDate),\n            //     datasets: [{\n            //         label: 'Total Transaction Amount',\n            //         data: Object.values(groupedByDate),\n            //         backgroundColor: 'rgba(75,192,192, 0.6)',\n            //         borderColor: 'rgba(75,192,192,1)',\n            //         borderWidth: 1,\n            //         pointBackgroundColor: 'rgba(75,192,192,1)',\n            //         pointBordeerColor: '#fff',\n            //         PointHoverBackgroundColor: '#fff',\n            //         pointHoverBordeerColor: 'rgba(75,192,192,1)',\n            //     }] \n            // });\n                setChartData({\n                    labels: Object.keys(groupedByDate),\n                    datasets: [{\n                        label: 'Total Transaction Amount',\n                        data: Object.values(groupedByDate),\n                        backgroundColor: 'rgba(75,192,192, 0.6)',\n                        borderColor: 'rgba(75,192,192,1)',\n                        borderWidth: 1,\n                        pointBackgroundColor: 'rgba(75,192,192,1)',\n                        pointBordeerColor: '#fff',\n                        PointHoverBackgroundColor: '#fff',\n                        pointHoverBordeerColor: 'rgba(75,192,192,1)',\n                    }]\n                });\n\n                setChartOptions({\n                    scales: {\n                        y: {\n                            \n                        }\n                    }\n                })\n        }\n    }, [selectedCustomer, data.transactions]);\n\n    const handleFilterChange = (e) => {\n        const { name, value } = e.target;\n        setFilter({ ...filter, [name]: value });\n    };\n\n    const filteredCustomers = data.customers.filter(customer => \n        customer.name.toLowerCase().includes(filter.customerName.toLowerCase()));\n\n    const filteredTransactions = data.transactions.filter(transaction => \n        (filter.transactionAmount === '' || transaction.amount === Number(filter.transactionAmount)));\n\n    const handleCustomerClick = (customer) => {\n        setSelectedCustomer(customer);\n    };\n\n    return (\n      <div>\n          <h1>Customer Transactions</h1>\n          <div className='customerinput'>\n              <input\n                  type=\"text\"\n                  name=\"customerName\"\n                  placeholder=\"Filter by customer name\"\n                  value={filter.customerName}\n                  onChange={handleFilterChange}\n              />\n              <input\n                  type=\"number\"\n                  name=\"transactionAmount\"\n                  placeholder=\"Filter by transaction amount\"\n                  value={filter.transactionAmount}\n                  onChange={handleFilterChange}\n              />\n          </div>\n          <table>\n              <thead>\n                  <tr>\n                      <th>Customer Name</th>\n                      <th>Transaction Date</th>\n                      <th>Transaction Amount</th>\n                  </tr>\n              </thead>\n              <tbody>\n                  {filteredCustomers.map(customer => (\n                      filteredTransactions\n                          .filter(transaction => transaction.customer_id === customer.id)\n                          .map(transaction => (\n                              <tr key={transaction.id} onClick={() => handleCustomerClick(customer)}>\n                                  <td>{customer.name}</td>\n                                  <td>{transaction.date}</td>\n                                  <td>{transaction.amount}</td>\n                              </tr>\n                          ))\n                  ))}\n              </tbody>\n          </table>\n          {selectedCustomer && chartData.labels && chartData.datasets ? (\n              <div className=\"chart-container\">\n                  <h2>Transactions for {selectedCustomer.name}</h2>\n                  <Line data={chartData} />\n              </div>\n          ) : (\n              selectedCustomer && <div className=\"no-data\">No data available for the selected customer.</div>\n          )}\n          \n      </div>\n\n  \n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}