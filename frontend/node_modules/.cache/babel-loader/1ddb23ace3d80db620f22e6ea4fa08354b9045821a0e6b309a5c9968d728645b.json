{"ast":null,"code":"var _jsxFileName = \"G:\\\\OneDrive\\\\Desktop\\\\job-fair\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import { Line } from \"react-chartjs-2\";\n// import \"chart.js/auto\";\n// import \"./App.css\";\n// import { plugins, scales } from \"chart.js/auto\";\n// function App() {\n//   const [data, setData] = useState({ customers: [], transactions: [] });\n//   const [filter, setFilter] = useState({\n//     customerName: \"\",\n//     transactionAmount: \"\",\n//   });\n//   const [selectedCustomer, setSelectedCustomer] = useState(null);\n//   const [chartData, setChartData] = useState({});\n//   const [chartOptions, setChartOptions] = useState({});\n\n//   useEffect(() => {\n//     axios\n//       .get(\"http://localhost:5001/api/data\")\n//       .then((response) => setData(response.data))\n//       .catch((error) => console.error(\"Error fetching data:\", error));\n//   }, []);\n\n//   useEffect(() => {\n//     if (selectedCustomer) {\n//       const customerTransactions = data.transactions.filter(\n//         (transaction) => transaction.customer_id === selectedCustomer.id\n//       );\n//       const groupedByDate = customerTransactions.reduce((acc, transaction) => {\n//         acc[transaction.date] =\n//           (acc[transaction.date] || 0) + transaction.amount;\n//         return acc;\n//       }, {});\n\n//       setChartData({\n//           labels: Object.keys(groupedByDate),\n//           datasets: [{\n//               label: 'Total Transaction Amount',\n//               data: Object.values(groupedByDate),\n//               backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//               borderColor: 'rgba(75, 192, 192, 1)',\n//               borderWidth: 1\n//           }]\n//       });\n\n//       setChartData({\n//           labels: Object.keys(groupedByDate),\n//           datasets: [{\n//               label: 'Total Transaction Amount',\n//               data: Object.values(groupedByDate),\n//               backgroundColor: 'rgba(75,192,192, 0.6)',\n//               borderColor: 'rgba(75,192,192,1)',\n//               borderWidth: 1,\n//               pointBackgroundColor: 'rgba(75,192,192,1)',\n//               pointBordeerColor: '#fff',\n//               PointHoverBackgroundColor: '#fff',\n//               pointHoverBordeerColor: 'rgba(75,192,192,1)',\n//           }]\n//       });\n\n//       setChartData({\n//           labels: Object.keys(groupedByDate),\n//           datasets: [{\n//               label: 'Total Transaction Amount',\n//               data: Object.values(groupedByDate),\n//               backgroundColor: 'rgba(75,192,192, 0.6)',\n//               borderColor: 'rgba(75,192,192,1)',\n//               borderWidth: 1,\n//               pointBackgroundColor: 'rgba(75,192,192,1)',\n//               pointBordeerColor: '#fff',\n//               PointHoverBackgroundColor: '#fff',\n//               pointHoverBordeerColor: 'rgba(75,192,192,1)',\n//           }]\n//       });\n\n//       setChartOptions({\n//           scales: {\n//               y: {\n//                   type: 'linear',\n//                   min: 0,\n//                   max: Math.max(...Object.values(groupedByDate)) + 5\n//               }\n//           }\n//       });\n\n//       setChartData({\n//         datasets: [\n//           {\n//             label: \"Total Transaction Amount\",\n//             data: dates.map((date, index) => ({ x: date, y: amounts[index] })),\n//             backgroundColor: \"rgba(75,192,192, 0.6)\",\n//             borderColor: \"rgba(75,192,192,1)\",\n//             borderWidth: 1,\n//             pointBackgroundColor: \"rgba(75,192,192,1)\",\n//             pointBordeerColor: \"#fff\",\n//             PointHoverBackgroundColor: \"#fff\",\n//             pointHoverBordeerColor: \"rgba(75,192,192,1)\",\n//           }]\n//       });\n\n//       setChartOptions({\n//         plugins: {\n//             tooltip:{\n//                 callbacks: {\n//                     label:function(context){\n//                         return `Date: ${context.raw.x}\\nAmount: ${context.raw.y}`;\n//                     }\n//                 }\n//             }\n//         },\n//         animation: {\n//             duration: 2000,\n//             easing: 'easeInOutQuart'\n//         },\n//         scales:{\n//             x: {\n//                 type: 'time',\n//                 time: {\n//                     unit: 'day'\n//                 }\n//             },\n//             y: {\n//                 type: 'linear',\n//                 min: 0,\n//                 max: Math.max(...amounts) + 10 \n//             }\n//         }\n//       })\n//     }\n//   }, [selectedCustomer, data.transactions]);\n\n//   const handleFilterChange = (e) => {\n//     const { name, value } = e.target;\n//     setFilter({ ...filter, [name]: value });\n//   };\n\n//   const filteredCustomers = data.customers.filter((customer) =>\n//     customer.name.toLowerCase().includes(filter.customerName.toLowerCase())\n//   );\n\n//   const filteredTransactions = data.transactions.filter(\n//     (transaction) =>\n//       filter.transactionAmount === \"\" ||\n//       transaction.amount === Number(filter.transactionAmount)\n//   );\n\n//   const handleCustomerClick = (customer) => {\n//     setSelectedCustomer(customer);\n//   };\n\n//   return (\n//     <div>\n//       <h1>Customer Transactions</h1>\n//       <div className=\"customerinput\">\n//         <input\n//           type=\"text\"\n//           name=\"customerName\"\n//           placeholder=\"Filter by customer name\"\n//           value={filter.customerName}\n//           onChange={handleFilterChange}\n//         />\n//         <input\n//           type=\"number\"\n//           name=\"transactionAmount\"\n//           placeholder=\"Filter by transaction amount\"\n//           value={filter.transactionAmount}\n//           onChange={handleFilterChange}\n//         />\n//       </div>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Customer Name</th>\n//             <th>Transaction Date</th>\n//             <th>Transaction Amount</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {filteredCustomers.map((customer) =>\n//             filteredTransactions\n//               .filter((transaction) => transaction.customer_id === customer.id)\n//               .map((transaction) => (\n//                 <tr\n//                   key={transaction.id}\n//                   onClick={() => handleCustomerClick(customer)}\n//                 >\n//                   <td>{customer.name}</td>\n//                   <td>{transaction.date}</td>\n//                   <td>{transaction.amount}</td>\n//                 </tr>\n//               ))\n//           )}\n//         </tbody>\n//       </table>\n//       {selectedCustomer && chartData.labels && chartData.datasets ? (\n//         <div className=\"chart-container\">\n//           <h2>Transactions for {selectedCustomer.name}</h2>\n//           <Line data={chartData} options={chartOptions} />\n//         </div>\n//       ) : (\n//         selectedCustomer && (\n//           <div className=\"no-data\">\n//             No data available for the selected customer.\n//           </div>\n//         )\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { Line } from 'react-chartjs-2';\n// import 'chart.js/auto';\n// import './App.css';\n\n// function App() {\n//     const [data, setData] = useState({ customers: [], transactions: [] });\n//     const [filter, setFilter] = useState({ customerName: '', transactionAmount: '' });\n//     const [selectedCustomer, setSelectedCustomer] = useState(null);\n//     const [chartData, setChartData] = useState({});\n//     const [chartOptions, setChartOptions] = useState({});\n\n//     useEffect(() => {\n//         axios.get('http://localhost:5001/api/data')\n//             .then(response => setData(response.data))\n//             .catch(error => console.error('Error fetching data:', error));\n//     }, []);\n\n//     useEffect(() => {\n//         if (selectedCustomer) {\n//             const customerTransactions = data.transactions.filter(transaction => transaction.customer_id === selectedCustomer.id);\n//             const groupedByDate = customerTransactions.reduce((acc, transaction) => {\n//                 acc[transaction.date] = (acc[transaction.date] || 0) + transaction.amount;\n//                 return acc;\n//             }, {});\n\n//             const dates = Object.keys(groupedByDate);\n//             const amounts = Object.values(groupedByDate);\n\n//             setChartData({\n//                 labels: dates,\n//                 datasets: [{\n//                     label: 'Total Transaction Amount',\n//                     data: amounts,\n//                     backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//                     borderColor: 'rgba(75, 192, 192, 1)',\n//                     borderWidth: 1,\n//                     pointBackgroundColor: 'rgba(75, 192, 192, 1)',\n//                     pointBorderColor: '#fff',\n//                     pointHoverBackgroundColor: '#fff',\n//                     pointHoverBorderColor: 'rgba(75, 192, 192, 1)',\n//                 }]\n//             });\n\n//             setChartOptions({\n//                 scales: {\n//                     y: {\n//                         type: 'linear',\n//                         min: 0,\n//                         max: Math.max(...amounts) + 10 // Adjust the max value as needed\n//                     }\n//                 }\n//             });\n//         }\n//     }, [selectedCustomer, data.transactions]);\n\n//     const handleFilterChange = (e) => {\n//         const { name, value } = e.target;\n//         setFilter({ ...filter, [name]: value });\n//     };\n\n//     const filteredCustomers = data.customers.filter(customer => \n//         customer.name.toLowerCase().includes(filter.customerName.toLowerCase()));\n\n//     const filteredTransactions = data.transactions.filter(transaction => \n//         (filter.transactionAmount === '' || transaction.amount === Number(filter.transactionAmount)));\n\n//     const handleCustomerClick = (customer) => {\n//         setSelectedCustomer(customer);\n//     };\n\n//     return (\n//         <div>\n//             <h1>Customer Transactions</h1>\n//             <div className='customerinput'>\n//                 <input\n//                     type=\"text\"\n//                     name=\"customerName\"\n//                     placeholder=\"Filter by customer name\"\n//                     value={filter.customerName}\n//                     onChange={handleFilterChange}\n//                 />\n//                 <input\n//                     type=\"number\"\n//                     name=\"transactionAmount\"\n//                     placeholder=\"Filter by transaction amount\"\n//                     value={filter.transactionAmount}\n//                     onChange={handleFilterChange}\n//                 />\n//             </div>\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>Customer Name</th>\n//                         <th>Transaction Date</th>\n//                         <th>Transaction Amount</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {filteredCustomers.map(customer => (\n//                         filteredTransactions\n//                             .filter(transaction => transaction.customer_id === customer.id)\n//                             .map(transaction => (\n//                                 <tr key={transaction.id} onClick={() => handleCustomerClick(customer)}>\n//                                     <td>{customer.name}</td>\n//                                     <td>{transaction.date}</td>\n//                                     <td>{transaction.amount}</td>\n//                                 </tr>\n//                             ))\n//                     ))}\n//                 </tbody>\n//             </table>\n//             {selectedCustomer && chartData.labels && chartData.datasets ? (\n//                 <div className=\"chart-container\">\n//                     <h2>Transactions for {selectedCustomer.name}</h2>\n//                     <Line data={chartData} options={chartOptions} />\n//                 </div>\n//             ) : (\n//                 selectedCustomer && <div className=\"no-data\">No data available for the selected customer.</div>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default App;\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState({\n    customers: [],\n    transactions: []\n  });\n  const [filter, setFilter] = useState({\n    customerName: '',\n    transactionAmount: ''\n  });\n  const [customerSelection, setCustomerSelection] = useState(null);\n  const [chartData, setChartData] = useState({});\n  const [chartOptions, setChartOptions] = useState({});\n  useEffect(() => {\n    axios.get('http://localhost:5001/api/data').then(response => setData(response.data)).catch(error => console.error('Error fetching data:', error));\n  }, []);\n  useEffect(() => {\n    if (customerSelection) {\n      const customerTransactions = data.transactions.filter(transaction => transaction.customer_id === customerSelection.id);\n      const groupedByDate = customerTransactions.reduce((acc, transaction) => {\n        acc[transaction.date] = (acc[transaction.date] || 0) + transaction.amount;\n        return acc;\n      }, {});\n      setChartData({\n        labels: Object.keys(groupedByDate),\n        datasets: [{\n          label: 'Total Transaction Amount',\n          data: Object.values(groupedByDate),\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1,\n          pointBackgroundColor: 'rgba(75, 192, 192, 1)',\n          pointBorderColor: '#fff',\n          pointHoverBackgroundColor: '#fff',\n          pointHoverBorderColor: 'rgba(75, 192, 192, 1)'\n        }]\n      });\n      setChartOptions({\n        scales: {\n          y: {\n            type: 'linear',\n            min: 0,\n            max: Math.max(...Object.values(groupedByDate)) + 5\n          }\n        }\n      });\n    }\n  }, [customerSelection, data.transactions]);\n  const handleFilterChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFilter({\n      ...filter,\n      [name]: value\n    });\n  };\n  const customerFilteration = data.customers.filter(customer => customer.name.toLowerCase().includes(filter.customerName.toLowerCase()));\n  const transactionFilteration = data.transactions.filter(transaction => filter.transactionAmount === '' || transaction.amount === Number(filter.transactionAmount));\n  const handleCustomerClick = customer => {\n    setCustomerSelection(customer);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Customer Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"customer\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"customerName\",\n        placeholder: \"Filter by customer name\",\n        value: filter.customerName,\n        onChange: handleFilterChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"transactionAmount\",\n        placeholder: \"Filter by transaction amount\",\n        value: filter.transactionAmount,\n        onChange: handleFilterChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Customer Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Transaction Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Transaction Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: customerFilteration.map(customer => transactionFilteration.filter(transaction => transaction.customer_id === customer.id).map(transaction => /*#__PURE__*/_jsxDEV(\"tr\", {\n          onClick: () => handleCustomerClick(customer),\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: customer.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: transaction.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: transaction.amount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 37\n          }, this)]\n        }, transaction.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 33\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 13\n    }, this), customerSelection && chartData.labels && chartData.datasets ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Transactions for \", customerSelection.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 17\n    }, this) : customerSelection && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data\",\n      children: \"No data available for the selected customer.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 38\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 433,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"e1NqCdd3ZgmHhym0h7CRiwONgvg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","Line","jsxDEV","_jsxDEV","App","_s","data","setData","customers","transactions","filter","setFilter","customerName","transactionAmount","customerSelection","setCustomerSelection","chartData","setChartData","chartOptions","setChartOptions","get","then","response","catch","error","console","customerTransactions","transaction","customer_id","id","groupedByDate","reduce","acc","date","amount","labels","Object","keys","datasets","label","values","backgroundColor","borderColor","borderWidth","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","scales","y","type","min","max","Math","handleFilterChange","e","name","value","target","customerFilteration","customer","toLowerCase","includes","transactionFilteration","Number","handleCustomerClick","children","fileName","_jsxFileName","lineNumber","columnNumber","className","placeholder","onChange","map","onClick","options","_c","$RefreshReg$"],"sources":["G:/OneDrive/Desktop/job-fair/frontend/src/App.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import { Line } from \"react-chartjs-2\";\n// import \"chart.js/auto\";\n// import \"./App.css\";\n// import { plugins, scales } from \"chart.js/auto\";\n// function App() {\n//   const [data, setData] = useState({ customers: [], transactions: [] });\n//   const [filter, setFilter] = useState({\n//     customerName: \"\",\n//     transactionAmount: \"\",\n//   });\n//   const [selectedCustomer, setSelectedCustomer] = useState(null);\n//   const [chartData, setChartData] = useState({});\n//   const [chartOptions, setChartOptions] = useState({});\n\n//   useEffect(() => {\n//     axios\n//       .get(\"http://localhost:5001/api/data\")\n//       .then((response) => setData(response.data))\n//       .catch((error) => console.error(\"Error fetching data:\", error));\n//   }, []);\n\n//   useEffect(() => {\n//     if (selectedCustomer) {\n//       const customerTransactions = data.transactions.filter(\n//         (transaction) => transaction.customer_id === selectedCustomer.id\n//       );\n//       const groupedByDate = customerTransactions.reduce((acc, transaction) => {\n//         acc[transaction.date] =\n//           (acc[transaction.date] || 0) + transaction.amount;\n//         return acc;\n//       }, {});\n\n//       setChartData({\n//           labels: Object.keys(groupedByDate),\n//           datasets: [{\n//               label: 'Total Transaction Amount',\n//               data: Object.values(groupedByDate),\n//               backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//               borderColor: 'rgba(75, 192, 192, 1)',\n//               borderWidth: 1\n//           }]\n//       });\n\n//       setChartData({\n//           labels: Object.keys(groupedByDate),\n//           datasets: [{\n//               label: 'Total Transaction Amount',\n//               data: Object.values(groupedByDate),\n//               backgroundColor: 'rgba(75,192,192, 0.6)',\n//               borderColor: 'rgba(75,192,192,1)',\n//               borderWidth: 1,\n//               pointBackgroundColor: 'rgba(75,192,192,1)',\n//               pointBordeerColor: '#fff',\n//               PointHoverBackgroundColor: '#fff',\n//               pointHoverBordeerColor: 'rgba(75,192,192,1)',\n//           }]\n//       });\n\n//       setChartData({\n//           labels: Object.keys(groupedByDate),\n//           datasets: [{\n//               label: 'Total Transaction Amount',\n//               data: Object.values(groupedByDate),\n//               backgroundColor: 'rgba(75,192,192, 0.6)',\n//               borderColor: 'rgba(75,192,192,1)',\n//               borderWidth: 1,\n//               pointBackgroundColor: 'rgba(75,192,192,1)',\n//               pointBordeerColor: '#fff',\n//               PointHoverBackgroundColor: '#fff',\n//               pointHoverBordeerColor: 'rgba(75,192,192,1)',\n//           }]\n//       });\n\n//       setChartOptions({\n//           scales: {\n//               y: {\n//                   type: 'linear',\n//                   min: 0,\n//                   max: Math.max(...Object.values(groupedByDate)) + 5\n//               }\n//           }\n//       });\n\n//       setChartData({\n//         datasets: [\n//           {\n//             label: \"Total Transaction Amount\",\n//             data: dates.map((date, index) => ({ x: date, y: amounts[index] })),\n//             backgroundColor: \"rgba(75,192,192, 0.6)\",\n//             borderColor: \"rgba(75,192,192,1)\",\n//             borderWidth: 1,\n//             pointBackgroundColor: \"rgba(75,192,192,1)\",\n//             pointBordeerColor: \"#fff\",\n//             PointHoverBackgroundColor: \"#fff\",\n//             pointHoverBordeerColor: \"rgba(75,192,192,1)\",\n//           }]\n//       });\n\n//       setChartOptions({\n//         plugins: {\n//             tooltip:{\n//                 callbacks: {\n//                     label:function(context){\n//                         return `Date: ${context.raw.x}\\nAmount: ${context.raw.y}`;\n//                     }\n//                 }\n//             }\n//         },\n//         animation: {\n//             duration: 2000,\n//             easing: 'easeInOutQuart'\n//         },\n//         scales:{\n//             x: {\n//                 type: 'time',\n//                 time: {\n//                     unit: 'day'\n//                 }\n//             },\n//             y: {\n//                 type: 'linear',\n//                 min: 0,\n//                 max: Math.max(...amounts) + 10 \n//             }\n//         }\n//       })\n//     }\n//   }, [selectedCustomer, data.transactions]);\n\n//   const handleFilterChange = (e) => {\n//     const { name, value } = e.target;\n//     setFilter({ ...filter, [name]: value });\n//   };\n\n//   const filteredCustomers = data.customers.filter((customer) =>\n//     customer.name.toLowerCase().includes(filter.customerName.toLowerCase())\n//   );\n\n//   const filteredTransactions = data.transactions.filter(\n//     (transaction) =>\n//       filter.transactionAmount === \"\" ||\n//       transaction.amount === Number(filter.transactionAmount)\n//   );\n\n//   const handleCustomerClick = (customer) => {\n//     setSelectedCustomer(customer);\n//   };\n\n//   return (\n//     <div>\n//       <h1>Customer Transactions</h1>\n//       <div className=\"customerinput\">\n//         <input\n//           type=\"text\"\n//           name=\"customerName\"\n//           placeholder=\"Filter by customer name\"\n//           value={filter.customerName}\n//           onChange={handleFilterChange}\n//         />\n//         <input\n//           type=\"number\"\n//           name=\"transactionAmount\"\n//           placeholder=\"Filter by transaction amount\"\n//           value={filter.transactionAmount}\n//           onChange={handleFilterChange}\n//         />\n//       </div>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Customer Name</th>\n//             <th>Transaction Date</th>\n//             <th>Transaction Amount</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {filteredCustomers.map((customer) =>\n//             filteredTransactions\n//               .filter((transaction) => transaction.customer_id === customer.id)\n//               .map((transaction) => (\n//                 <tr\n//                   key={transaction.id}\n//                   onClick={() => handleCustomerClick(customer)}\n//                 >\n//                   <td>{customer.name}</td>\n//                   <td>{transaction.date}</td>\n//                   <td>{transaction.amount}</td>\n//                 </tr>\n//               ))\n//           )}\n//         </tbody>\n//       </table>\n//       {selectedCustomer && chartData.labels && chartData.datasets ? (\n//         <div className=\"chart-container\">\n//           <h2>Transactions for {selectedCustomer.name}</h2>\n//           <Line data={chartData} options={chartOptions} />\n//         </div>\n//       ) : (\n//         selectedCustomer && (\n//           <div className=\"no-data\">\n//             No data available for the selected customer.\n//           </div>\n//         )\n//       )}\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// export default App;\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { Line } from 'react-chartjs-2';\n// import 'chart.js/auto';\n// import './App.css';\n\n// function App() {\n//     const [data, setData] = useState({ customers: [], transactions: [] });\n//     const [filter, setFilter] = useState({ customerName: '', transactionAmount: '' });\n//     const [selectedCustomer, setSelectedCustomer] = useState(null);\n//     const [chartData, setChartData] = useState({});\n//     const [chartOptions, setChartOptions] = useState({});\n\n//     useEffect(() => {\n//         axios.get('http://localhost:5001/api/data')\n//             .then(response => setData(response.data))\n//             .catch(error => console.error('Error fetching data:', error));\n//     }, []);\n\n//     useEffect(() => {\n//         if (selectedCustomer) {\n//             const customerTransactions = data.transactions.filter(transaction => transaction.customer_id === selectedCustomer.id);\n//             const groupedByDate = customerTransactions.reduce((acc, transaction) => {\n//                 acc[transaction.date] = (acc[transaction.date] || 0) + transaction.amount;\n//                 return acc;\n//             }, {});\n\n//             const dates = Object.keys(groupedByDate);\n//             const amounts = Object.values(groupedByDate);\n\n//             setChartData({\n//                 labels: dates,\n//                 datasets: [{\n//                     label: 'Total Transaction Amount',\n//                     data: amounts,\n//                     backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//                     borderColor: 'rgba(75, 192, 192, 1)',\n//                     borderWidth: 1,\n//                     pointBackgroundColor: 'rgba(75, 192, 192, 1)',\n//                     pointBorderColor: '#fff',\n//                     pointHoverBackgroundColor: '#fff',\n//                     pointHoverBorderColor: 'rgba(75, 192, 192, 1)',\n//                 }]\n//             });\n\n//             setChartOptions({\n//                 scales: {\n//                     y: {\n//                         type: 'linear',\n//                         min: 0,\n//                         max: Math.max(...amounts) + 10 // Adjust the max value as needed\n//                     }\n//                 }\n//             });\n//         }\n//     }, [selectedCustomer, data.transactions]);\n\n//     const handleFilterChange = (e) => {\n//         const { name, value } = e.target;\n//         setFilter({ ...filter, [name]: value });\n//     };\n\n//     const filteredCustomers = data.customers.filter(customer => \n//         customer.name.toLowerCase().includes(filter.customerName.toLowerCase()));\n\n//     const filteredTransactions = data.transactions.filter(transaction => \n//         (filter.transactionAmount === '' || transaction.amount === Number(filter.transactionAmount)));\n\n//     const handleCustomerClick = (customer) => {\n//         setSelectedCustomer(customer);\n//     };\n\n//     return (\n//         <div>\n//             <h1>Customer Transactions</h1>\n//             <div className='customerinput'>\n//                 <input\n//                     type=\"text\"\n//                     name=\"customerName\"\n//                     placeholder=\"Filter by customer name\"\n//                     value={filter.customerName}\n//                     onChange={handleFilterChange}\n//                 />\n//                 <input\n//                     type=\"number\"\n//                     name=\"transactionAmount\"\n//                     placeholder=\"Filter by transaction amount\"\n//                     value={filter.transactionAmount}\n//                     onChange={handleFilterChange}\n//                 />\n//             </div>\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>Customer Name</th>\n//                         <th>Transaction Date</th>\n//                         <th>Transaction Amount</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {filteredCustomers.map(customer => (\n//                         filteredTransactions\n//                             .filter(transaction => transaction.customer_id === customer.id)\n//                             .map(transaction => (\n//                                 <tr key={transaction.id} onClick={() => handleCustomerClick(customer)}>\n//                                     <td>{customer.name}</td>\n//                                     <td>{transaction.date}</td>\n//                                     <td>{transaction.amount}</td>\n//                                 </tr>\n//                             ))\n//                     ))}\n//                 </tbody>\n//             </table>\n//             {selectedCustomer && chartData.labels && chartData.datasets ? (\n//                 <div className=\"chart-container\">\n//                     <h2>Transactions for {selectedCustomer.name}</h2>\n//                     <Line data={chartData} options={chartOptions} />\n//                 </div>\n//             ) : (\n//                 selectedCustomer && <div className=\"no-data\">No data available for the selected customer.</div>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default App;\n\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport './App.css';\n\nfunction App() {\n    const [data, setData] = useState({ customers: [], transactions: [] });\n    const [filter, setFilter] = useState({ customerName: '', transactionAmount: '' });\n    const [customerSelection, setCustomerSelection] = useState(null);\n    const [chartData, setChartData] = useState({});\n    const [chartOptions, setChartOptions] = useState({});\n\n    useEffect(() => {\n        axios.get('http://localhost:5001/api/data')\n            .then(response => setData(response.data))\n            .catch(error => console.error('Error fetching data:', error));\n    }, []);\n\n    useEffect(() => {\n        if (customerSelection) {\n            const customerTransactions = data.transactions.filter(transaction => transaction.customer_id === customerSelection.id);\n            const groupedByDate = customerTransactions.reduce((acc, transaction) => {\n                acc[transaction.date] = (acc[transaction.date] || 0) + transaction.amount;\n                return acc;\n            }, {});\n\n            setChartData({\n                labels: Object.keys(groupedByDate),\n                datasets: [{\n                    label: 'Total Transaction Amount',\n                    data: Object.values(groupedByDate),\n                    backgroundColor: 'rgba(75, 192, 192, 0.6)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1,\n                    pointBackgroundColor: 'rgba(75, 192, 192, 1)',\n                    pointBorderColor: '#fff',\n                    pointHoverBackgroundColor: '#fff',\n                    pointHoverBorderColor: 'rgba(75, 192, 192, 1)',\n                }]\n            });\n\n            setChartOptions({\n                scales: {\n                    y: {\n                        type: 'linear',\n                        min: 0,\n                        max: Math.max(...Object.values(groupedByDate)) + 5\n                    }\n                }\n            });\n        }\n    }, [customerSelection, data.transactions]);\n\n    const handleFilterChange = (e) => {\n        const { name, value } = e.target;\n        setFilter({ ...filter, [name]: value });\n    };\n\n    const customerFilteration = data.customers.filter(customer =>\n        customer.name.toLowerCase().includes(filter.customerName.toLowerCase())\n    );\n\n    const transactionFilteration = data.transactions.filter(transaction =>\n        (filter.transactionAmount === '' || transaction.amount === Number(filter.transactionAmount))\n    );\n\n    const handleCustomerClick = (customer) => {\n        setCustomerSelection(customer);\n    };\n\n    return (\n        <div>\n            <h1>Customer Transactions</h1>\n            <div className=\"customer\">\n                <input\n                    type=\"text\"\n                    name=\"customerName\"\n                    placeholder=\"Filter by customer name\"\n                    value={filter.customerName}\n                    onChange={handleFilterChange}\n                />\n                <input\n                    type=\"number\"\n                    name=\"transactionAmount\"\n                    placeholder=\"Filter by transaction amount\"\n                    value={filter.transactionAmount}\n                    onChange={handleFilterChange}\n                />\n            </div>\n\n            <table>\n                <thead>\n                    <tr>\n                        <th>Customer Name</th>\n                        <th>Transaction Date</th>\n                        <th>Transaction Amount</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {customerFilteration.map(customer => (\n                        transactionFilteration\n                            .filter(transaction => transaction.customer_id === customer.id)\n                            .map(transaction => (\n                                <tr key={transaction.id} onClick={() => handleCustomerClick(customer)}>\n                                    <td>{customer.name}</td>\n                                    <td>{transaction.date}</td>\n                                    <td>{transaction.amount}</td>\n                                </tr>\n                            ))\n                    ))}\n                </tbody>\n            </table>\n\n            {customerSelection && chartData.labels && chartData.datasets ? (\n                <div className=\"chart-container\">\n                    <h2>Transactions for {customerSelection.name}</h2>\n                    <Line data={chartData} options={chartOptions} />\n                </div>\n            ) : (\n                customerSelection && <div className=\"no-data\">No data available for the selected customer.</div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}