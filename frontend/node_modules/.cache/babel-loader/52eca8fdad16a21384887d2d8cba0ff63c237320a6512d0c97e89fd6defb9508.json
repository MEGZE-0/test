{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import { Line } from \"react-chartjs-2\";\n// import \"chart.js/auto\";\n// import \"./App.css\";\n// import { plugins, scales } from \"chart.js/auto\";\n// function App() {\n//   const [data, setData] = useState({ customers: [], transactions: [] });\n//   const [filter, setFilter] = useState({\n//     customerName: \"\",\n//     transactionAmount: \"\",\n//   });\n//   const [selectedCustomer, setSelectedCustomer] = useState(null);\n//   const [chartData, setChartData] = useState({});\n//   const [chartOptions, setChartOptions] = useState({});\n//   useEffect(() => {\n//     axios\n//       .get(\"http://localhost:5001/api/data\")\n//       .then((response) => setData(response.data))\n//       .catch((error) => console.error(\"Error fetching data:\", error));\n//   }, []);\n//   useEffect(() => {\n//     if (selectedCustomer) {\n//       const customerTransactions = data.transactions.filter(\n//         (transaction) => transaction.customer_id === selectedCustomer.id\n//       );\n//       const groupedByDate = customerTransactions.reduce((acc, transaction) => {\n//         acc[transaction.date] =\n//           (acc[transaction.date] || 0) + transaction.amount;\n//         return acc;\n//       }, {});\n//       setChartData({\n//           labels: Object.keys(groupedByDate),\n//           datasets: [{\n//               label: 'Total Transaction Amount',\n//               data: Object.values(groupedByDate),\n//               backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//               borderColor: 'rgba(75, 192, 192, 1)',\n//               borderWidth: 1\n//           }]\n//       });\n//       setChartData({\n//           labels: Object.keys(groupedByDate),\n//           datasets: [{\n//               label: 'Total Transaction Amount',\n//               data: Object.values(groupedByDate),\n//               backgroundColor: 'rgba(75,192,192, 0.6)',\n//               borderColor: 'rgba(75,192,192,1)',\n//               borderWidth: 1,\n//               pointBackgroundColor: 'rgba(75,192,192,1)',\n//               pointBordeerColor: '#fff',\n//               PointHoverBackgroundColor: '#fff',\n//               pointHoverBordeerColor: 'rgba(75,192,192,1)',\n//           }]\n//       });\n//       setChartData({\n//           labels: Object.keys(groupedByDate),\n//           datasets: [{\n//               label: 'Total Transaction Amount',\n//               data: Object.values(groupedByDate),\n//               backgroundColor: 'rgba(75,192,192, 0.6)',\n//               borderColor: 'rgba(75,192,192,1)',\n//               borderWidth: 1,\n//               pointBackgroundColor: 'rgba(75,192,192,1)',\n//               pointBordeerColor: '#fff',\n//               PointHoverBackgroundColor: '#fff',\n//               pointHoverBordeerColor: 'rgba(75,192,192,1)',\n//           }]\n//       });\n//       setChartOptions({\n//           scales: {\n//               y: {\n//                   type: 'linear',\n//                   min: 0,\n//                   max: Math.max(...Object.values(groupedByDate)) + 5\n//               }\n//           }\n//       });\n//       setChartData({\n//         datasets: [\n//           {\n//             label: \"Total Transaction Amount\",\n//             data: dates.map((date, index) => ({ x: date, y: amounts[index] })),\n//             backgroundColor: \"rgba(75,192,192, 0.6)\",\n//             borderColor: \"rgba(75,192,192,1)\",\n//             borderWidth: 1,\n//             pointBackgroundColor: \"rgba(75,192,192,1)\",\n//             pointBordeerColor: \"#fff\",\n//             PointHoverBackgroundColor: \"#fff\",\n//             pointHoverBordeerColor: \"rgba(75,192,192,1)\",\n//           }]\n//       });\n//       setChartOptions({\n//         plugins: {\n//             tooltip:{\n//                 callbacks: {\n//                     label:function(context){\n//                         return `Date: ${context.raw.x}\\nAmount: ${context.raw.y}`;\n//                     }\n//                 }\n//             }\n//         },\n//         animation: {\n//             duration: 2000,\n//             easing: 'easeInOutQuart'\n//         },\n//         scales:{\n//             x: {\n//                 type: 'time',\n//                 time: {\n//                     unit: 'day'\n//                 }\n//             },\n//             y: {\n//                 type: 'linear',\n//                 min: 0,\n//                 max: Math.max(...amounts) + 10 \n//             }\n//         }\n//       })\n//     }\n//   }, [selectedCustomer, data.transactions]);\n//   const handleFilterChange = (e) => {\n//     const { name, value } = e.target;\n//     setFilter({ ...filter, [name]: value });\n//   };\n//   const filteredCustomers = data.customers.filter((customer) =>\n//     customer.name.toLowerCase().includes(filter.customerName.toLowerCase())\n//   );\n//   const filteredTransactions = data.transactions.filter(\n//     (transaction) =>\n//       filter.transactionAmount === \"\" ||\n//       transaction.amount === Number(filter.transactionAmount)\n//   );\n//   const handleCustomerClick = (customer) => {\n//     setSelectedCustomer(customer);\n//   };\n//   return (\n//     <div>\n//       <h1>Customer Transactions</h1>\n//       <div className=\"customerinput\">\n//         <input\n//           type=\"text\"\n//           name=\"customerName\"\n//           placeholder=\"Filter by customer name\"\n//           value={filter.customerName}\n//           onChange={handleFilterChange}\n//         />\n//         <input\n//           type=\"number\"\n//           name=\"transactionAmount\"\n//           placeholder=\"Filter by transaction amount\"\n//           value={filter.transactionAmount}\n//           onChange={handleFilterChange}\n//         />\n//       </div>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Customer Name</th>\n//             <th>Transaction Date</th>\n//             <th>Transaction Amount</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {filteredCustomers.map((customer) =>\n//             filteredTransactions\n//               .filter((transaction) => transaction.customer_id === customer.id)\n//               .map((transaction) => (\n//                 <tr\n//                   key={transaction.id}\n//                   onClick={() => handleCustomerClick(customer)}\n//                 >\n//                   <td>{customer.name}</td>\n//                   <td>{transaction.date}</td>\n//                   <td>{transaction.amount}</td>\n//                 </tr>\n//               ))\n//           )}\n//         </tbody>\n//       </table>\n//       {selectedCustomer && chartData.labels && chartData.datasets ? (\n//         <div className=\"chart-container\">\n//           <h2>Transactions for {selectedCustomer.name}</h2>\n//           <Line data={chartData} options={chartOptions} />\n//         </div>\n//       ) : (\n//         selectedCustomer && (\n//           <div className=\"no-data\">\n//             No data available for the selected customer.\n//           </div>\n//         )\n//       )}\n//     </div>\n//   );\n// }\n// export default App;\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { Line } from 'react-chartjs-2';\n// import 'chart.js/auto';\n// import './App.css';\n// function App() {\n//     const [data, setData] = useState({ customers: [], transactions: [] });\n//     const [filter, setFilter] = useState({ customerName: '', transactionAmount: '' });\n//     const [selectedCustomer, setSelectedCustomer] = useState(null);\n//     const [chartData, setChartData] = useState({});\n//     const [chartOptions, setChartOptions] = useState({});\n//     useEffect(() => {\n//         axios.get('http://localhost:5001/api/data')\n//             .then(response => setData(response.data))\n//             .catch(error => console.error('Error fetching data:', error));\n//     }, []);\n//     useEffect(() => {\n//         if (selectedCustomer) {\n//             const customerTransactions = data.transactions.filter(transaction => transaction.customer_id === selectedCustomer.id);\n//             const groupedByDate = customerTransactions.reduce((acc, transaction) => {\n//                 acc[transaction.date] = (acc[transaction.date] || 0) + transaction.amount;\n//                 return acc;\n//             }, {});\n//             const dates = Object.keys(groupedByDate);\n//             const amounts = Object.values(groupedByDate);\n//             setChartData({\n//                 labels: dates,\n//                 datasets: [{\n//                     label: 'Total Transaction Amount',\n//                     data: amounts,\n//                     backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//                     borderColor: 'rgba(75, 192, 192, 1)',\n//                     borderWidth: 1,\n//                     pointBackgroundColor: 'rgba(75, 192, 192, 1)',\n//                     pointBorderColor: '#fff',\n//                     pointHoverBackgroundColor: '#fff',\n//                     pointHoverBorderColor: 'rgba(75, 192, 192, 1)',\n//                 }]\n//             });\n//             setChartOptions({\n//                 scales: {\n//                     y: {\n//                         type: 'linear',\n//                         min: 0,\n//                         max: Math.max(...amounts) + 10 // Adjust the max value as needed\n//                     }\n//                 }\n//             });\n//         }\n//     }, [selectedCustomer, data.transactions]);\n//     const handleFilterChange = (e) => {\n//         const { name, value } = e.target;\n//         setFilter({ ...filter, [name]: value });\n//     };\n//     const filteredCustomers = data.customers.filter(customer => \n//         customer.name.toLowerCase().includes(filter.customerName.toLowerCase()));\n//     const filteredTransactions = data.transactions.filter(transaction => \n//         (filter.transactionAmount === '' || transaction.amount === Number(filter.transactionAmount)));\n//     const handleCustomerClick = (customer) => {\n//         setSelectedCustomer(customer);\n//     };\n//     return (\n//         <div>\n//             <h1>Customer Transactions</h1>\n//             <div className='customerinput'>\n//                 <input\n//                     type=\"text\"\n//                     name=\"customerName\"\n//                     placeholder=\"Filter by customer name\"\n//                     value={filter.customerName}\n//                     onChange={handleFilterChange}\n//                 />\n//                 <input\n//                     type=\"number\"\n//                     name=\"transactionAmount\"\n//                     placeholder=\"Filter by transaction amount\"\n//                     value={filter.transactionAmount}\n//                     onChange={handleFilterChange}\n//                 />\n//             </div>\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>Customer Name</th>\n//                         <th>Transaction Date</th>\n//                         <th>Transaction Amount</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {filteredCustomers.map(customer => (\n//                         filteredTransactions\n//                             .filter(transaction => transaction.customer_id === customer.id)\n//                             .map(transaction => (\n//                                 <tr key={transaction.id} onClick={() => handleCustomerClick(customer)}>\n//                                     <td>{customer.name}</td>\n//                                     <td>{transaction.date}</td>\n//                                     <td>{transaction.amount}</td>\n//                                 </tr>\n//                             ))\n//                     ))}\n//                 </tbody>\n//             </table>\n//             {selectedCustomer && chartData.labels && chartData.datasets ? (\n//                 <div className=\"chart-container\">\n//                     <h2>Transactions for {selectedCustomer.name}</h2>\n//                     <Line data={chartData} options={chartOptions} />\n//                 </div>\n//             ) : (\n//                 selectedCustomer && <div className=\"no-data\">No data available for the selected customer.</div>\n//             )}\n//         </div>\n//     );\n// }\n// export default App;\nimport React,{useEffect,useState}from'react';import axios from'axios';import{Line}from'react-chartjs-2';import'chart.js/auto';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[data,setData]=useState({customers:[],transactions:[]});const[filter,setFilter]=useState({customerName:'',transactionAmount:''});const[customerSelection,setCustomerSelection]=useState(null);const[chartData,setChartData]=useState({});const[chartOptions,setChartOptions]=useState({});useEffect(()=>{axios.get('http://localhost:5001/api/data').then(response=>setData(response.data)).catch(error=>console.error('Error fetching data:',error));},[]);useEffect(()=>{if(customerSelection){const customerTransactions=data.transactions.filter(transaction=>transaction.customer_id===customerSelection.id);const groupedByDate=customerTransactions.reduce((acc,transaction)=>{acc[transaction.date]=(acc[transaction.date]||0)+transaction.amount;return acc;},{});setChartData({labels:Object.keys(groupedByDate),datasets:[{label:'Total Transaction Amount',data:Object.values(groupedByDate),backgroundColor:'rgba(75, 192, 192, 0.6)',borderColor:'rgba(75, 192, 192, 1)',borderWidth:1,pointBackgroundColor:'rgba(75, 192, 192, 1)',pointBorderColor:'#fff',pointHoverBackgroundColor:'#fff',pointHoverBorderColor:'rgba(75, 192, 192, 1)'}]});setChartOptions({scales:{y:{type:'linear',min:0,max:Math.max(...Object.values(groupedByDate))+30}}});}},[customerSelection,data.transactions]);const handleFilterChange=e=>{const{name,value}=e.target;setFilter({...filter,[name]:value});};const customerFilteration=data.customers.filter(customer=>customer.name.toLowerCase().includes(filter.customerName.toLowerCase()));const transactionFilteration=data.transactions.filter(transaction=>filter.transactionAmount===''||transaction.amount===Number(filter.transactionAmount));const handleCustomerClick=customer=>{setCustomerSelection(customer);};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Customer Transactions\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"customer\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"customerName\",placeholder:\"Filter by customer name\",value:filter.customerName,onChange:handleFilterChange}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",name:\"transactionAmount\",placeholder:\"Filter by transaction amount\",value:filter.transactionAmount,onChange:handleFilterChange})]}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Customer Name\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Transaction Date\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Transaction Amount\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:customerFilteration.map(customer=>transactionFilteration.filter(transaction=>transaction.customer_id===customer.id).map(transaction=>/*#__PURE__*/_jsxs(\"tr\",{onClick:()=>handleCustomerClick(customer),children:[/*#__PURE__*/_jsx(\"td\",{children:customer.name}),/*#__PURE__*/_jsx(\"td\",{children:transaction.date}),/*#__PURE__*/_jsx(\"td\",{children:transaction.amount})]},transaction.id)))})]}),customerSelection&&chartData.labels&&chartData.datasets?/*#__PURE__*/_jsxs(\"div\",{className:\"chart-container\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Transactions for \",customerSelection.name]}),/*#__PURE__*/_jsx(Line,{data:chartData,options:chartOptions})]}):customerSelection&&/*#__PURE__*/_jsx(\"div\",{className:\"no-data\",children:\"No data available for the selected customer.\"})]});}export default App;","map":{"version":3,"names":["React","useEffect","useState","axios","Line","jsx","_jsx","jsxs","_jsxs","App","data","setData","customers","transactions","filter","setFilter","customerName","transactionAmount","customerSelection","setCustomerSelection","chartData","setChartData","chartOptions","setChartOptions","get","then","response","catch","error","console","customerTransactions","transaction","customer_id","id","groupedByDate","reduce","acc","date","amount","labels","Object","keys","datasets","label","values","backgroundColor","borderColor","borderWidth","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","scales","y","type","min","max","Math","handleFilterChange","e","name","value","target","customerFilteration","customer","toLowerCase","includes","transactionFilteration","Number","handleCustomerClick","children","className","placeholder","onChange","map","onClick","options"],"sources":["G:/OneDrive/Desktop/job-fair/frontend/src/App.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import { Line } from \"react-chartjs-2\";\n// import \"chart.js/auto\";\n// import \"./App.css\";\n// import { plugins, scales } from \"chart.js/auto\";\n// function App() {\n//   const [data, setData] = useState({ customers: [], transactions: [] });\n//   const [filter, setFilter] = useState({\n//     customerName: \"\",\n//     transactionAmount: \"\",\n//   });\n//   const [selectedCustomer, setSelectedCustomer] = useState(null);\n//   const [chartData, setChartData] = useState({});\n//   const [chartOptions, setChartOptions] = useState({});\n\n//   useEffect(() => {\n//     axios\n//       .get(\"http://localhost:5001/api/data\")\n//       .then((response) => setData(response.data))\n//       .catch((error) => console.error(\"Error fetching data:\", error));\n//   }, []);\n\n//   useEffect(() => {\n//     if (selectedCustomer) {\n//       const customerTransactions = data.transactions.filter(\n//         (transaction) => transaction.customer_id === selectedCustomer.id\n//       );\n//       const groupedByDate = customerTransactions.reduce((acc, transaction) => {\n//         acc[transaction.date] =\n//           (acc[transaction.date] || 0) + transaction.amount;\n//         return acc;\n//       }, {});\n\n//       setChartData({\n//           labels: Object.keys(groupedByDate),\n//           datasets: [{\n//               label: 'Total Transaction Amount',\n//               data: Object.values(groupedByDate),\n//               backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//               borderColor: 'rgba(75, 192, 192, 1)',\n//               borderWidth: 1\n//           }]\n//       });\n\n//       setChartData({\n//           labels: Object.keys(groupedByDate),\n//           datasets: [{\n//               label: 'Total Transaction Amount',\n//               data: Object.values(groupedByDate),\n//               backgroundColor: 'rgba(75,192,192, 0.6)',\n//               borderColor: 'rgba(75,192,192,1)',\n//               borderWidth: 1,\n//               pointBackgroundColor: 'rgba(75,192,192,1)',\n//               pointBordeerColor: '#fff',\n//               PointHoverBackgroundColor: '#fff',\n//               pointHoverBordeerColor: 'rgba(75,192,192,1)',\n//           }]\n//       });\n\n//       setChartData({\n//           labels: Object.keys(groupedByDate),\n//           datasets: [{\n//               label: 'Total Transaction Amount',\n//               data: Object.values(groupedByDate),\n//               backgroundColor: 'rgba(75,192,192, 0.6)',\n//               borderColor: 'rgba(75,192,192,1)',\n//               borderWidth: 1,\n//               pointBackgroundColor: 'rgba(75,192,192,1)',\n//               pointBordeerColor: '#fff',\n//               PointHoverBackgroundColor: '#fff',\n//               pointHoverBordeerColor: 'rgba(75,192,192,1)',\n//           }]\n//       });\n\n//       setChartOptions({\n//           scales: {\n//               y: {\n//                   type: 'linear',\n//                   min: 0,\n//                   max: Math.max(...Object.values(groupedByDate)) + 5\n//               }\n//           }\n//       });\n\n//       setChartData({\n//         datasets: [\n//           {\n//             label: \"Total Transaction Amount\",\n//             data: dates.map((date, index) => ({ x: date, y: amounts[index] })),\n//             backgroundColor: \"rgba(75,192,192, 0.6)\",\n//             borderColor: \"rgba(75,192,192,1)\",\n//             borderWidth: 1,\n//             pointBackgroundColor: \"rgba(75,192,192,1)\",\n//             pointBordeerColor: \"#fff\",\n//             PointHoverBackgroundColor: \"#fff\",\n//             pointHoverBordeerColor: \"rgba(75,192,192,1)\",\n//           }]\n//       });\n\n//       setChartOptions({\n//         plugins: {\n//             tooltip:{\n//                 callbacks: {\n//                     label:function(context){\n//                         return `Date: ${context.raw.x}\\nAmount: ${context.raw.y}`;\n//                     }\n//                 }\n//             }\n//         },\n//         animation: {\n//             duration: 2000,\n//             easing: 'easeInOutQuart'\n//         },\n//         scales:{\n//             x: {\n//                 type: 'time',\n//                 time: {\n//                     unit: 'day'\n//                 }\n//             },\n//             y: {\n//                 type: 'linear',\n//                 min: 0,\n//                 max: Math.max(...amounts) + 10 \n//             }\n//         }\n//       })\n//     }\n//   }, [selectedCustomer, data.transactions]);\n\n//   const handleFilterChange = (e) => {\n//     const { name, value } = e.target;\n//     setFilter({ ...filter, [name]: value });\n//   };\n\n//   const filteredCustomers = data.customers.filter((customer) =>\n//     customer.name.toLowerCase().includes(filter.customerName.toLowerCase())\n//   );\n\n//   const filteredTransactions = data.transactions.filter(\n//     (transaction) =>\n//       filter.transactionAmount === \"\" ||\n//       transaction.amount === Number(filter.transactionAmount)\n//   );\n\n//   const handleCustomerClick = (customer) => {\n//     setSelectedCustomer(customer);\n//   };\n\n//   return (\n//     <div>\n//       <h1>Customer Transactions</h1>\n//       <div className=\"customerinput\">\n//         <input\n//           type=\"text\"\n//           name=\"customerName\"\n//           placeholder=\"Filter by customer name\"\n//           value={filter.customerName}\n//           onChange={handleFilterChange}\n//         />\n//         <input\n//           type=\"number\"\n//           name=\"transactionAmount\"\n//           placeholder=\"Filter by transaction amount\"\n//           value={filter.transactionAmount}\n//           onChange={handleFilterChange}\n//         />\n//       </div>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Customer Name</th>\n//             <th>Transaction Date</th>\n//             <th>Transaction Amount</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {filteredCustomers.map((customer) =>\n//             filteredTransactions\n//               .filter((transaction) => transaction.customer_id === customer.id)\n//               .map((transaction) => (\n//                 <tr\n//                   key={transaction.id}\n//                   onClick={() => handleCustomerClick(customer)}\n//                 >\n//                   <td>{customer.name}</td>\n//                   <td>{transaction.date}</td>\n//                   <td>{transaction.amount}</td>\n//                 </tr>\n//               ))\n//           )}\n//         </tbody>\n//       </table>\n//       {selectedCustomer && chartData.labels && chartData.datasets ? (\n//         <div className=\"chart-container\">\n//           <h2>Transactions for {selectedCustomer.name}</h2>\n//           <Line data={chartData} options={chartOptions} />\n//         </div>\n//       ) : (\n//         selectedCustomer && (\n//           <div className=\"no-data\">\n//             No data available for the selected customer.\n//           </div>\n//         )\n//       )}\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// export default App;\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { Line } from 'react-chartjs-2';\n// import 'chart.js/auto';\n// import './App.css';\n\n// function App() {\n//     const [data, setData] = useState({ customers: [], transactions: [] });\n//     const [filter, setFilter] = useState({ customerName: '', transactionAmount: '' });\n//     const [selectedCustomer, setSelectedCustomer] = useState(null);\n//     const [chartData, setChartData] = useState({});\n//     const [chartOptions, setChartOptions] = useState({});\n\n//     useEffect(() => {\n//         axios.get('http://localhost:5001/api/data')\n//             .then(response => setData(response.data))\n//             .catch(error => console.error('Error fetching data:', error));\n//     }, []);\n\n//     useEffect(() => {\n//         if (selectedCustomer) {\n//             const customerTransactions = data.transactions.filter(transaction => transaction.customer_id === selectedCustomer.id);\n//             const groupedByDate = customerTransactions.reduce((acc, transaction) => {\n//                 acc[transaction.date] = (acc[transaction.date] || 0) + transaction.amount;\n//                 return acc;\n//             }, {});\n\n//             const dates = Object.keys(groupedByDate);\n//             const amounts = Object.values(groupedByDate);\n\n//             setChartData({\n//                 labels: dates,\n//                 datasets: [{\n//                     label: 'Total Transaction Amount',\n//                     data: amounts,\n//                     backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//                     borderColor: 'rgba(75, 192, 192, 1)',\n//                     borderWidth: 1,\n//                     pointBackgroundColor: 'rgba(75, 192, 192, 1)',\n//                     pointBorderColor: '#fff',\n//                     pointHoverBackgroundColor: '#fff',\n//                     pointHoverBorderColor: 'rgba(75, 192, 192, 1)',\n//                 }]\n//             });\n\n//             setChartOptions({\n//                 scales: {\n//                     y: {\n//                         type: 'linear',\n//                         min: 0,\n//                         max: Math.max(...amounts) + 10 // Adjust the max value as needed\n//                     }\n//                 }\n//             });\n//         }\n//     }, [selectedCustomer, data.transactions]);\n\n//     const handleFilterChange = (e) => {\n//         const { name, value } = e.target;\n//         setFilter({ ...filter, [name]: value });\n//     };\n\n//     const filteredCustomers = data.customers.filter(customer => \n//         customer.name.toLowerCase().includes(filter.customerName.toLowerCase()));\n\n//     const filteredTransactions = data.transactions.filter(transaction => \n//         (filter.transactionAmount === '' || transaction.amount === Number(filter.transactionAmount)));\n\n//     const handleCustomerClick = (customer) => {\n//         setSelectedCustomer(customer);\n//     };\n\n//     return (\n//         <div>\n//             <h1>Customer Transactions</h1>\n//             <div className='customerinput'>\n//                 <input\n//                     type=\"text\"\n//                     name=\"customerName\"\n//                     placeholder=\"Filter by customer name\"\n//                     value={filter.customerName}\n//                     onChange={handleFilterChange}\n//                 />\n//                 <input\n//                     type=\"number\"\n//                     name=\"transactionAmount\"\n//                     placeholder=\"Filter by transaction amount\"\n//                     value={filter.transactionAmount}\n//                     onChange={handleFilterChange}\n//                 />\n//             </div>\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>Customer Name</th>\n//                         <th>Transaction Date</th>\n//                         <th>Transaction Amount</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {filteredCustomers.map(customer => (\n//                         filteredTransactions\n//                             .filter(transaction => transaction.customer_id === customer.id)\n//                             .map(transaction => (\n//                                 <tr key={transaction.id} onClick={() => handleCustomerClick(customer)}>\n//                                     <td>{customer.name}</td>\n//                                     <td>{transaction.date}</td>\n//                                     <td>{transaction.amount}</td>\n//                                 </tr>\n//                             ))\n//                     ))}\n//                 </tbody>\n//             </table>\n//             {selectedCustomer && chartData.labels && chartData.datasets ? (\n//                 <div className=\"chart-container\">\n//                     <h2>Transactions for {selectedCustomer.name}</h2>\n//                     <Line data={chartData} options={chartOptions} />\n//                 </div>\n//             ) : (\n//                 selectedCustomer && <div className=\"no-data\">No data available for the selected customer.</div>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default App;\n\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport './App.css';\n\nfunction App() {\n    const [data, setData] = useState({ customers: [], transactions: [] });\n    const [filter, setFilter] = useState({ customerName: '', transactionAmount: '' });\n    const [customerSelection, setCustomerSelection] = useState(null);\n    const [chartData, setChartData] = useState({});\n    const [chartOptions, setChartOptions] = useState({});\n\n    useEffect(() => {\n        axios.get('http://localhost:5001/api/data')\n            .then(response => setData(response.data))\n            .catch(error => console.error('Error fetching data:', error));\n    }, []);\n\n    useEffect(() => {\n        if (customerSelection) {\n            const customerTransactions = data.transactions.filter(transaction => transaction.customer_id === customerSelection.id);\n            const groupedByDate = customerTransactions.reduce((acc, transaction) => {\n                acc[transaction.date] = (acc[transaction.date] || 0) + transaction.amount;\n                return acc;\n            }, {});\n\n            setChartData({\n                labels: Object.keys(groupedByDate),\n                datasets: [{\n                    label: 'Total Transaction Amount',\n                    data: Object.values(groupedByDate),\n                    backgroundColor: 'rgba(75, 192, 192, 0.6)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1,\n                    pointBackgroundColor: 'rgba(75, 192, 192, 1)',\n                    pointBorderColor: '#fff',\n                    pointHoverBackgroundColor: '#fff',\n                    pointHoverBorderColor: 'rgba(75, 192, 192, 1)',\n                }]\n            });\n\n            setChartOptions({\n                scales: {\n                    y: {\n                        type: 'linear',\n                        min: 0,\n                        max: Math.max(...Object.values(groupedByDate)) + 30\n                    }\n                }\n            });\n        }\n    }, [customerSelection, data.transactions]);\n\n    const handleFilterChange = (e) => {\n        const { name, value } = e.target;\n        setFilter({ ...filter, [name]: value });\n    };\n\n    const customerFilteration = data.customers.filter(customer =>\n        customer.name.toLowerCase().includes(filter.customerName.toLowerCase())\n    );\n\n    const transactionFilteration = data.transactions.filter(transaction =>\n        (filter.transactionAmount === '' || transaction.amount === Number(filter.transactionAmount))\n    );\n\n    const handleCustomerClick = (customer) => {\n        setCustomerSelection(customer);\n    };\n\n    return (\n        <div>\n            <h1>Customer Transactions</h1>\n            <div className=\"customer\">\n                <input\n                    type=\"text\"\n                    name=\"customerName\"\n                    placeholder=\"Filter by customer name\"\n                    value={filter.customerName}\n                    onChange={handleFilterChange}\n                />\n                <input\n                    type=\"number\"\n                    name=\"transactionAmount\"\n                    placeholder=\"Filter by transaction amount\"\n                    value={filter.transactionAmount}\n                    onChange={handleFilterChange}\n                />\n            </div>\n\n            <table>\n                <thead>\n                    <tr>\n                        <th>Customer Name</th>\n                        <th>Transaction Date</th>\n                        <th>Transaction Amount</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {customerFilteration.map(customer => (\n                        transactionFilteration\n                            .filter(transaction => transaction.customer_id === customer.id)\n                            .map(transaction => (\n                                <tr key={transaction.id} onClick={() => handleCustomerClick(customer)}>\n                                    <td>{customer.name}</td>\n                                    <td>{transaction.date}</td>\n                                    <td>{transaction.amount}</td>\n                                </tr>\n                            ))\n                    ))}\n                </tbody>\n            </table>\n\n            {customerSelection && chartData.labels && chartData.datasets ? (\n                <div className=\"chart-container\">\n                    <h2>Transactions for {customerSelection.name}</h2>\n                    <Line data={chartData} options={chartOptions} />\n                </div>\n            ) : (\n                customerSelection && <div className=\"no-data\">No data available for the selected customer.</div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}