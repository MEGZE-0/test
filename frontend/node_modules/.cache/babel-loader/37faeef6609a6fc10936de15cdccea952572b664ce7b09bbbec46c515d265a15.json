{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import { Line } from \"react-chartjs-2\";\n// import \"chart.js/auto\";\n// import \"./App.css\";\n// import { plugins, scales } from \"chart.js/auto\";\n// function App() {\n//   const [data, setData] = useState({ customers: [], transactions: [] });\n//   const [filter, setFilter] = useState({\n//     customerName: \"\",\n//     transactionAmount: \"\",\n//   });\n//   const [selectedCustomer, setSelectedCustomer] = useState(null);\n//   const [chartData, setChartData] = useState({});\n//   const [chartOptions, setChartOptions] = useState({});\n\n//   useEffect(() => {\n//     axios\n//       .get(\"http://localhost:5001/api/data\")\n//       .then((response) => setData(response.data))\n//       .catch((error) => console.error(\"Error fetching data:\", error));\n//   }, []);\n\n//   useEffect(() => {\n//     if (selectedCustomer) {\n//       const customerTransactions = data.transactions.filter(\n//         (transaction) => transaction.customer_id === selectedCustomer.id\n//       );\n//       const groupedByDate = customerTransactions.reduce((acc, transaction) => {\n//         acc[transaction.date] =\n//           (acc[transaction.date] || 0) + transaction.amount;\n//         return acc;\n//       }, {});\n\n//       setChartData({\n//           labels: Object.keys(groupedByDate),\n//           datasets: [{\n//               label: 'Total Transaction Amount',\n//               data: Object.values(groupedByDate),\n//               backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//               borderColor: 'rgba(75, 192, 192, 1)',\n//               borderWidth: 1\n//           }]\n//       });\n\n//       setChartData({\n//           labels: Object.keys(groupedByDate),\n//           datasets: [{\n//               label: 'Total Transaction Amount',\n//               data: Object.values(groupedByDate),\n//               backgroundColor: 'rgba(75,192,192, 0.6)',\n//               borderColor: 'rgba(75,192,192,1)',\n//               borderWidth: 1,\n//               pointBackgroundColor: 'rgba(75,192,192,1)',\n//               pointBordeerColor: '#fff',\n//               PointHoverBackgroundColor: '#fff',\n//               pointHoverBordeerColor: 'rgba(75,192,192,1)',\n//           }]\n//       });\n\n//       setChartData({\n//           labels: Object.keys(groupedByDate),\n//           datasets: [{\n//               label: 'Total Transaction Amount',\n//               data: Object.values(groupedByDate),\n//               backgroundColor: 'rgba(75,192,192, 0.6)',\n//               borderColor: 'rgba(75,192,192,1)',\n//               borderWidth: 1,\n//               pointBackgroundColor: 'rgba(75,192,192,1)',\n//               pointBordeerColor: '#fff',\n//               PointHoverBackgroundColor: '#fff',\n//               pointHoverBordeerColor: 'rgba(75,192,192,1)',\n//           }]\n//       });\n\n//       setChartOptions({\n//           scales: {\n//               y: {\n//                   type: 'linear',\n//                   min: 0,\n//                   max: Math.max(...Object.values(groupedByDate)) + 5\n//               }\n//           }\n//       });\n\n//       setChartData({\n//         datasets: [\n//           {\n//             label: \"Total Transaction Amount\",\n//             data: dates.map((date, index) => ({ x: date, y: amounts[index] })),\n//             backgroundColor: \"rgba(75,192,192, 0.6)\",\n//             borderColor: \"rgba(75,192,192,1)\",\n//             borderWidth: 1,\n//             pointBackgroundColor: \"rgba(75,192,192,1)\",\n//             pointBordeerColor: \"#fff\",\n//             PointHoverBackgroundColor: \"#fff\",\n//             pointHoverBordeerColor: \"rgba(75,192,192,1)\",\n//           }]\n//       });\n\n//       setChartOptions({\n//         plugins: {\n//             tooltip:{\n//                 callbacks: {\n//                     label:function(context){\n//                         return `Date: ${context.raw.x}\\nAmount: ${context.raw.y}`;\n//                     }\n//                 }\n//             }\n//         },\n//         animation: {\n//             duration: 2000,\n//             easing: 'easeInOutQuart'\n//         },\n//         scales:{\n//             x: {\n//                 type: 'time',\n//                 time: {\n//                     unit: 'day'\n//                 }\n//             },\n//             y: {\n//                 type: 'linear',\n//                 min: 0,\n//                 max: Math.max(...amounts) + 10 \n//             }\n//         }\n//       })\n//     }\n//   }, [selectedCustomer, data.transactions]);\n\n//   const handleFilterChange = (e) => {\n//     const { name, value } = e.target;\n//     setFilter({ ...filter, [name]: value });\n//   };\n\n//   const filteredCustomers = data.customers.filter((customer) =>\n//     customer.name.toLowerCase().includes(filter.customerName.toLowerCase())\n//   );\n\n//   const filteredTransactions = data.transactions.filter(\n//     (transaction) =>\n//       filter.transactionAmount === \"\" ||\n//       transaction.amount === Number(filter.transactionAmount)\n//   );\n\n//   const handleCustomerClick = (customer) => {\n//     setSelectedCustomer(customer);\n//   };\n\n//   return (\n//     <div>\n//       <h1>Customer Transactions</h1>\n//       <div className=\"customerinput\">\n//         <input\n//           type=\"text\"\n//           name=\"customerName\"\n//           placeholder=\"Filter by customer name\"\n//           value={filter.customerName}\n//           onChange={handleFilterChange}\n//         />\n//         <input\n//           type=\"number\"\n//           name=\"transactionAmount\"\n//           placeholder=\"Filter by transaction amount\"\n//           value={filter.transactionAmount}\n//           onChange={handleFilterChange}\n//         />\n//       </div>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Customer Name</th>\n//             <th>Transaction Date</th>\n//             <th>Transaction Amount</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {filteredCustomers.map((customer) =>\n//             filteredTransactions\n//               .filter((transaction) => transaction.customer_id === customer.id)\n//               .map((transaction) => (\n//                 <tr\n//                   key={transaction.id}\n//                   onClick={() => handleCustomerClick(customer)}\n//                 >\n//                   <td>{customer.name}</td>\n//                   <td>{transaction.date}</td>\n//                   <td>{transaction.amount}</td>\n//                 </tr>\n//               ))\n//           )}\n//         </tbody>\n//       </table>\n//       {selectedCustomer && chartData.labels && chartData.datasets ? (\n//         <div className=\"chart-container\">\n//           <h2>Transactions for {selectedCustomer.name}</h2>\n//           <Line data={chartData} options={chartOptions} />\n//         </div>\n//       ) : (\n//         selectedCustomer && (\n//           <div className=\"no-data\">\n//             No data available for the selected customer.\n//           </div>\n//         )\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { Line } from 'react-chartjs-2';\n// import 'chart.js/auto';\n// import './App.css';\n\n// function App() {\n//     const [data, setData] = useState({ customers: [], transactions: [] });\n//     const [filter, setFilter] = useState({ customerName: '', transactionAmount: '' });\n//     const [selectedCustomer, setSelectedCustomer] = useState(null);\n//     const [chartData, setChartData] = useState({});\n//     const [chartOptions, setChartOptions] = useState({});\n\n//     useEffect(() => {\n//         axios.get('http://localhost:5001/api/data')\n//             .then(response => setData(response.data))\n//             .catch(error => console.error('Error fetching data:', error));\n//     }, []);\n\n//     useEffect(() => {\n//         if (selectedCustomer) {\n//             const customerTransactions = data.transactions.filter(transaction => transaction.customer_id === selectedCustomer.id);\n//             const groupedByDate = customerTransactions.reduce((acc, transaction) => {\n//                 acc[transaction.date] = (acc[transaction.date] || 0) + transaction.amount;\n//                 return acc;\n//             }, {});\n\n//             const dates = Object.keys(groupedByDate);\n//             const amounts = Object.values(groupedByDate);\n\n//             setChartData({\n//                 labels: dates,\n//                 datasets: [{\n//                     label: 'Total Transaction Amount',\n//                     data: amounts,\n//                     backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//                     borderColor: 'rgba(75, 192, 192, 1)',\n//                     borderWidth: 1,\n//                     pointBackgroundColor: 'rgba(75, 192, 192, 1)',\n//                     pointBorderColor: '#fff',\n//                     pointHoverBackgroundColor: '#fff',\n//                     pointHoverBorderColor: 'rgba(75, 192, 192, 1)',\n//                 }]\n//             });\n\n//             setChartOptions({\n//                 scales: {\n//                     y: {\n//                         type: 'linear',\n//                         min: 0,\n//                         max: Math.max(...amounts) + 10 // Adjust the max value as needed\n//                     }\n//                 }\n//             });\n//         }\n//     }, [selectedCustomer, data.transactions]);\n\n//     const handleFilterChange = (e) => {\n//         const { name, value } = e.target;\n//         setFilter({ ...filter, [name]: value });\n//     };\n\n//     const filteredCustomers = data.customers.filter(customer => \n//         customer.name.toLowerCase().includes(filter.customerName.toLowerCase()));\n\n//     const filteredTransactions = data.transactions.filter(transaction => \n//         (filter.transactionAmount === '' || transaction.amount === Number(filter.transactionAmount)));\n\n//     const handleCustomerClick = (customer) => {\n//         setSelectedCustomer(customer);\n//     };\n\n//     return (\n//         <div>\n//             <h1>Customer Transactions</h1>\n//             <div className='customerinput'>\n//                 <input\n//                     type=\"text\"\n//                     name=\"customerName\"\n//                     placeholder=\"Filter by customer name\"\n//                     value={filter.customerName}\n//                     onChange={handleFilterChange}\n//                 />\n//                 <input\n//                     type=\"number\"\n//                     name=\"transactionAmount\"\n//                     placeholder=\"Filter by transaction amount\"\n//                     value={filter.transactionAmount}\n//                     onChange={handleFilterChange}\n//                 />\n//             </div>\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>Customer Name</th>\n//                         <th>Transaction Date</th>\n//                         <th>Transaction Amount</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {filteredCustomers.map(customer => (\n//                         filteredTransactions\n//                             .filter(transaction => transaction.customer_id === customer.id)\n//                             .map(transaction => (\n//                                 <tr key={transaction.id} onClick={() => handleCustomerClick(customer)}>\n//                                     <td>{customer.name}</td>\n//                                     <td>{transaction.date}</td>\n//                                     <td>{transaction.amount}</td>\n//                                 </tr>\n//                             ))\n//                     ))}\n//                 </tbody>\n//             </table>\n//             {selectedCustomer && chartData.labels && chartData.datasets ? (\n//                 <div className=\"chart-container\">\n//                     <h2>Transactions for {selectedCustomer.name}</h2>\n//                     <Line data={chartData} options={chartOptions} />\n//                 </div>\n//             ) : (\n//                 selectedCustomer && <div className=\"no-data\">No data available for the selected customer.</div>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["G:/OneDrive/Desktop/job-fair/frontend/src/App.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import { Line } from \"react-chartjs-2\";\n// import \"chart.js/auto\";\n// import \"./App.css\";\n// import { plugins, scales } from \"chart.js/auto\";\n// function App() {\n//   const [data, setData] = useState({ customers: [], transactions: [] });\n//   const [filter, setFilter] = useState({\n//     customerName: \"\",\n//     transactionAmount: \"\",\n//   });\n//   const [selectedCustomer, setSelectedCustomer] = useState(null);\n//   const [chartData, setChartData] = useState({});\n//   const [chartOptions, setChartOptions] = useState({});\n\n//   useEffect(() => {\n//     axios\n//       .get(\"http://localhost:5001/api/data\")\n//       .then((response) => setData(response.data))\n//       .catch((error) => console.error(\"Error fetching data:\", error));\n//   }, []);\n\n//   useEffect(() => {\n//     if (selectedCustomer) {\n//       const customerTransactions = data.transactions.filter(\n//         (transaction) => transaction.customer_id === selectedCustomer.id\n//       );\n//       const groupedByDate = customerTransactions.reduce((acc, transaction) => {\n//         acc[transaction.date] =\n//           (acc[transaction.date] || 0) + transaction.amount;\n//         return acc;\n//       }, {});\n\n//       setChartData({\n//           labels: Object.keys(groupedByDate),\n//           datasets: [{\n//               label: 'Total Transaction Amount',\n//               data: Object.values(groupedByDate),\n//               backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//               borderColor: 'rgba(75, 192, 192, 1)',\n//               borderWidth: 1\n//           }]\n//       });\n\n//       setChartData({\n//           labels: Object.keys(groupedByDate),\n//           datasets: [{\n//               label: 'Total Transaction Amount',\n//               data: Object.values(groupedByDate),\n//               backgroundColor: 'rgba(75,192,192, 0.6)',\n//               borderColor: 'rgba(75,192,192,1)',\n//               borderWidth: 1,\n//               pointBackgroundColor: 'rgba(75,192,192,1)',\n//               pointBordeerColor: '#fff',\n//               PointHoverBackgroundColor: '#fff',\n//               pointHoverBordeerColor: 'rgba(75,192,192,1)',\n//           }]\n//       });\n\n//       setChartData({\n//           labels: Object.keys(groupedByDate),\n//           datasets: [{\n//               label: 'Total Transaction Amount',\n//               data: Object.values(groupedByDate),\n//               backgroundColor: 'rgba(75,192,192, 0.6)',\n//               borderColor: 'rgba(75,192,192,1)',\n//               borderWidth: 1,\n//               pointBackgroundColor: 'rgba(75,192,192,1)',\n//               pointBordeerColor: '#fff',\n//               PointHoverBackgroundColor: '#fff',\n//               pointHoverBordeerColor: 'rgba(75,192,192,1)',\n//           }]\n//       });\n\n//       setChartOptions({\n//           scales: {\n//               y: {\n//                   type: 'linear',\n//                   min: 0,\n//                   max: Math.max(...Object.values(groupedByDate)) + 5\n//               }\n//           }\n//       });\n\n//       setChartData({\n//         datasets: [\n//           {\n//             label: \"Total Transaction Amount\",\n//             data: dates.map((date, index) => ({ x: date, y: amounts[index] })),\n//             backgroundColor: \"rgba(75,192,192, 0.6)\",\n//             borderColor: \"rgba(75,192,192,1)\",\n//             borderWidth: 1,\n//             pointBackgroundColor: \"rgba(75,192,192,1)\",\n//             pointBordeerColor: \"#fff\",\n//             PointHoverBackgroundColor: \"#fff\",\n//             pointHoverBordeerColor: \"rgba(75,192,192,1)\",\n//           }]\n//       });\n\n//       setChartOptions({\n//         plugins: {\n//             tooltip:{\n//                 callbacks: {\n//                     label:function(context){\n//                         return `Date: ${context.raw.x}\\nAmount: ${context.raw.y}`;\n//                     }\n//                 }\n//             }\n//         },\n//         animation: {\n//             duration: 2000,\n//             easing: 'easeInOutQuart'\n//         },\n//         scales:{\n//             x: {\n//                 type: 'time',\n//                 time: {\n//                     unit: 'day'\n//                 }\n//             },\n//             y: {\n//                 type: 'linear',\n//                 min: 0,\n//                 max: Math.max(...amounts) + 10 \n//             }\n//         }\n//       })\n//     }\n//   }, [selectedCustomer, data.transactions]);\n\n//   const handleFilterChange = (e) => {\n//     const { name, value } = e.target;\n//     setFilter({ ...filter, [name]: value });\n//   };\n\n//   const filteredCustomers = data.customers.filter((customer) =>\n//     customer.name.toLowerCase().includes(filter.customerName.toLowerCase())\n//   );\n\n//   const filteredTransactions = data.transactions.filter(\n//     (transaction) =>\n//       filter.transactionAmount === \"\" ||\n//       transaction.amount === Number(filter.transactionAmount)\n//   );\n\n//   const handleCustomerClick = (customer) => {\n//     setSelectedCustomer(customer);\n//   };\n\n//   return (\n//     <div>\n//       <h1>Customer Transactions</h1>\n//       <div className=\"customerinput\">\n//         <input\n//           type=\"text\"\n//           name=\"customerName\"\n//           placeholder=\"Filter by customer name\"\n//           value={filter.customerName}\n//           onChange={handleFilterChange}\n//         />\n//         <input\n//           type=\"number\"\n//           name=\"transactionAmount\"\n//           placeholder=\"Filter by transaction amount\"\n//           value={filter.transactionAmount}\n//           onChange={handleFilterChange}\n//         />\n//       </div>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Customer Name</th>\n//             <th>Transaction Date</th>\n//             <th>Transaction Amount</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {filteredCustomers.map((customer) =>\n//             filteredTransactions\n//               .filter((transaction) => transaction.customer_id === customer.id)\n//               .map((transaction) => (\n//                 <tr\n//                   key={transaction.id}\n//                   onClick={() => handleCustomerClick(customer)}\n//                 >\n//                   <td>{customer.name}</td>\n//                   <td>{transaction.date}</td>\n//                   <td>{transaction.amount}</td>\n//                 </tr>\n//               ))\n//           )}\n//         </tbody>\n//       </table>\n//       {selectedCustomer && chartData.labels && chartData.datasets ? (\n//         <div className=\"chart-container\">\n//           <h2>Transactions for {selectedCustomer.name}</h2>\n//           <Line data={chartData} options={chartOptions} />\n//         </div>\n//       ) : (\n//         selectedCustomer && (\n//           <div className=\"no-data\">\n//             No data available for the selected customer.\n//           </div>\n//         )\n//       )}\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// export default App;\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { Line } from 'react-chartjs-2';\n// import 'chart.js/auto';\n// import './App.css';\n\n// function App() {\n//     const [data, setData] = useState({ customers: [], transactions: [] });\n//     const [filter, setFilter] = useState({ customerName: '', transactionAmount: '' });\n//     const [selectedCustomer, setSelectedCustomer] = useState(null);\n//     const [chartData, setChartData] = useState({});\n//     const [chartOptions, setChartOptions] = useState({});\n\n//     useEffect(() => {\n//         axios.get('http://localhost:5001/api/data')\n//             .then(response => setData(response.data))\n//             .catch(error => console.error('Error fetching data:', error));\n//     }, []);\n\n//     useEffect(() => {\n//         if (selectedCustomer) {\n//             const customerTransactions = data.transactions.filter(transaction => transaction.customer_id === selectedCustomer.id);\n//             const groupedByDate = customerTransactions.reduce((acc, transaction) => {\n//                 acc[transaction.date] = (acc[transaction.date] || 0) + transaction.amount;\n//                 return acc;\n//             }, {});\n\n//             const dates = Object.keys(groupedByDate);\n//             const amounts = Object.values(groupedByDate);\n\n//             setChartData({\n//                 labels: dates,\n//                 datasets: [{\n//                     label: 'Total Transaction Amount',\n//                     data: amounts,\n//                     backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//                     borderColor: 'rgba(75, 192, 192, 1)',\n//                     borderWidth: 1,\n//                     pointBackgroundColor: 'rgba(75, 192, 192, 1)',\n//                     pointBorderColor: '#fff',\n//                     pointHoverBackgroundColor: '#fff',\n//                     pointHoverBorderColor: 'rgba(75, 192, 192, 1)',\n//                 }]\n//             });\n\n//             setChartOptions({\n//                 scales: {\n//                     y: {\n//                         type: 'linear',\n//                         min: 0,\n//                         max: Math.max(...amounts) + 10 // Adjust the max value as needed\n//                     }\n//                 }\n//             });\n//         }\n//     }, [selectedCustomer, data.transactions]);\n\n//     const handleFilterChange = (e) => {\n//         const { name, value } = e.target;\n//         setFilter({ ...filter, [name]: value });\n//     };\n\n//     const filteredCustomers = data.customers.filter(customer => \n//         customer.name.toLowerCase().includes(filter.customerName.toLowerCase()));\n\n//     const filteredTransactions = data.transactions.filter(transaction => \n//         (filter.transactionAmount === '' || transaction.amount === Number(filter.transactionAmount)));\n\n//     const handleCustomerClick = (customer) => {\n//         setSelectedCustomer(customer);\n//     };\n\n//     return (\n//         <div>\n//             <h1>Customer Transactions</h1>\n//             <div className='customerinput'>\n//                 <input\n//                     type=\"text\"\n//                     name=\"customerName\"\n//                     placeholder=\"Filter by customer name\"\n//                     value={filter.customerName}\n//                     onChange={handleFilterChange}\n//                 />\n//                 <input\n//                     type=\"number\"\n//                     name=\"transactionAmount\"\n//                     placeholder=\"Filter by transaction amount\"\n//                     value={filter.transactionAmount}\n//                     onChange={handleFilterChange}\n//                 />\n//             </div>\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>Customer Name</th>\n//                         <th>Transaction Date</th>\n//                         <th>Transaction Amount</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {filteredCustomers.map(customer => (\n//                         filteredTransactions\n//                             .filter(transaction => transaction.customer_id === customer.id)\n//                             .map(transaction => (\n//                                 <tr key={transaction.id} onClick={() => handleCustomerClick(customer)}>\n//                                     <td>{customer.name}</td>\n//                                     <td>{transaction.date}</td>\n//                                     <td>{transaction.amount}</td>\n//                                 </tr>\n//                             ))\n//                     ))}\n//                 </tbody>\n//             </table>\n//             {selectedCustomer && chartData.labels && chartData.datasets ? (\n//                 <div className=\"chart-container\">\n//                     <h2>Transactions for {selectedCustomer.name}</h2>\n//                     <Line data={chartData} options={chartOptions} />\n//                 </div>\n//             ) : (\n//                 selectedCustomer && <div className=\"no-data\">No data available for the selected customer.</div>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default App;\n"],"mappingsuignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}