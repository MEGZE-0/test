{"ast":null,"code":"var _jsxFileName = \"G:\\\\OneDrive\\\\Desktop\\\\job-fair\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chart.js/auto\";\nimport \"./App.css\";\nimport { plugins, scales } from \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState({\n    customers: [],\n    transactions: []\n  });\n  const [filter, setFilter] = useState({\n    customerName: \"\",\n    transactionAmount: \"\"\n  });\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\n  const [chartData, setChartData] = useState({});\n  const [chartOptions, setChartOptions] = useState({});\n  useEffect(() => {\n    axios.get(\"http://localhost:5001/api/data\").then(response => setData(response.data)).catch(error => console.error(\"Error fetching data:\", error));\n  }, []);\n  useEffect(() => {\n    if (selectedCustomer) {\n      const customerTransactions = data.transactions.filter(transaction => transaction.customer_id === selectedCustomer.id);\n      const groupedByDate = customerTransactions.reduce((acc, transaction) => {\n        acc[transaction.date] = (acc[transaction.date] || 0) + transaction.amount;\n        return acc;\n      }, {});\n\n      // setChartData({\n      //     labels: Object.keys(groupedByDate),\n      //     datasets: [{\n      //         label: 'Total Transaction Amount',\n      //         data: Object.values(groupedByDate),\n      //         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n      //         borderColor: 'rgba(75, 192, 192, 1)',\n      //         borderWidth: 1\n      //     }]\n      // });\n\n      // setChartData({\n      //     labels: Object.keys(groupedByDate),\n      //     datasets: [{\n      //         label: 'Total Transaction Amount',\n      //         data: Object.values(groupedByDate),\n      //         backgroundColor: 'rgba(75,192,192, 0.6)',\n      //         borderColor: 'rgba(75,192,192,1)',\n      //         borderWidth: 1,\n      //         pointBackgroundColor: 'rgba(75,192,192,1)',\n      //         pointBordeerColor: '#fff',\n      //         PointHoverBackgroundColor: '#fff',\n      //         pointHoverBordeerColor: 'rgba(75,192,192,1)',\n      //     }]\n      // });\n\n      // setChartData({\n      //     labels: Object.keys(groupedByDate),\n      //     datasets: [{\n      //         label: 'Total Transaction Amount',\n      //         data: Object.values(groupedByDate),\n      //         backgroundColor: 'rgba(75,192,192, 0.6)',\n      //         borderColor: 'rgba(75,192,192,1)',\n      //         borderWidth: 1,\n      //         pointBackgroundColor: 'rgba(75,192,192,1)',\n      //         pointBordeerColor: '#fff',\n      //         PointHoverBackgroundColor: '#fff',\n      //         pointHoverBordeerColor: 'rgba(75,192,192,1)',\n      //     }]\n      // });\n\n      // setChartOptions({\n      //     scales: {\n      //         y: {\n      //             type: 'linear',\n      //             min: 0,\n      //             max: Math.max(...Object.values(groupedByDate)) + 5\n      //         }\n      //     }\n      // });\n\n      setChartData({\n        datasets: [{\n          label: \"Total Transaction Amount\",\n          data: dates.map((date, index) => ({\n            x: date,\n            y: amounts[index]\n          })),\n          backgroundColor: \"rgba(75,192,192, 0.6)\",\n          borderColor: \"rgba(75,192,192,1)\",\n          borderWidth: 1,\n          pointBackgroundColor: \"rgba(75,192,192,1)\",\n          pointBordeerColor: \"#fff\",\n          PointHoverBackgroundColor: \"#fff\",\n          pointHoverBordeerColor: \"rgba(75,192,192,1)\"\n        }]\n      });\n      setChartOptions({\n        plugins: {\n          tooltip: {\n            callbacks: {\n              label\n            }\n          }\n        }\n      });\n    }\n  }, [selectedCustomer, data.transactions]);\n  const handleFilterChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFilter({\n      ...filter,\n      [name]: value\n    });\n  };\n  const filteredCustomers = data.customers.filter(customer => customer.name.toLowerCase().includes(filter.customerName.toLowerCase()));\n  const filteredTransactions = data.transactions.filter(transaction => filter.transactionAmount === \"\" || transaction.amount === Number(filter.transactionAmount));\n  const handleCustomerClick = customer => {\n    setSelectedCustomer(customer);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Customer Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"customerinput\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"customerName\",\n        placeholder: \"Filter by customer name\",\n        value: filter.customerName,\n        onChange: handleFilterChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"transactionAmount\",\n        placeholder: \"Filter by transaction amount\",\n        value: filter.transactionAmount,\n        onChange: handleFilterChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Customer Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Transaction Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Transaction Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: filteredCustomers.map(customer => filteredTransactions.filter(transaction => transaction.customer_id === customer.id).map(transaction => /*#__PURE__*/_jsxDEV(\"tr\", {\n          onClick: () => handleCustomerClick(customer),\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: customer.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: transaction.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: transaction.amount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 19\n          }, this)]\n        }, transaction.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 17\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), selectedCustomer && chartData.labels && chartData.datasets ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Transactions for \", selectedCustomer.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this) : selectedCustomer && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data\",\n      children: \"No data available for the selected customer.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"L5a65aVAPSSC/ig3dGA8qM2eghE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","Line","plugins","scales","jsxDEV","_jsxDEV","App","_s","data","setData","customers","transactions","filter","setFilter","customerName","transactionAmount","selectedCustomer","setSelectedCustomer","chartData","setChartData","chartOptions","setChartOptions","get","then","response","catch","error","console","customerTransactions","transaction","customer_id","id","groupedByDate","reduce","acc","date","amount","datasets","label","dates","map","index","x","y","amounts","backgroundColor","borderColor","borderWidth","pointBackgroundColor","pointBordeerColor","PointHoverBackgroundColor","pointHoverBordeerColor","tooltip","callbacks","handleFilterChange","e","name","value","target","filteredCustomers","customer","toLowerCase","includes","filteredTransactions","Number","handleCustomerClick","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","onChange","onClick","labels","options","_c","$RefreshReg$"],"sources":["G:/OneDrive/Desktop/job-fair/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chart.js/auto\";\nimport \"./App.css\";\nimport { plugins, scales } from \"chart.js/auto\";\nfunction App() {\n  const [data, setData] = useState({ customers: [], transactions: [] });\n  const [filter, setFilter] = useState({\n    customerName: \"\",\n    transactionAmount: \"\",\n  });\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\n  const [chartData, setChartData] = useState({});\n  const [chartOptions, setChartOptions] = useState({});\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:5001/api/data\")\n      .then((response) => setData(response.data))\n      .catch((error) => console.error(\"Error fetching data:\", error));\n  }, []);\n\n  useEffect(() => {\n    if (selectedCustomer) {\n      const customerTransactions = data.transactions.filter(\n        (transaction) => transaction.customer_id === selectedCustomer.id\n      );\n      const groupedByDate = customerTransactions.reduce((acc, transaction) => {\n        acc[transaction.date] =\n          (acc[transaction.date] || 0) + transaction.amount;\n        return acc;\n      }, {});\n\n      // setChartData({\n      //     labels: Object.keys(groupedByDate),\n      //     datasets: [{\n      //         label: 'Total Transaction Amount',\n      //         data: Object.values(groupedByDate),\n      //         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n      //         borderColor: 'rgba(75, 192, 192, 1)',\n      //         borderWidth: 1\n      //     }]\n      // });\n\n      // setChartData({\n      //     labels: Object.keys(groupedByDate),\n      //     datasets: [{\n      //         label: 'Total Transaction Amount',\n      //         data: Object.values(groupedByDate),\n      //         backgroundColor: 'rgba(75,192,192, 0.6)',\n      //         borderColor: 'rgba(75,192,192,1)',\n      //         borderWidth: 1,\n      //         pointBackgroundColor: 'rgba(75,192,192,1)',\n      //         pointBordeerColor: '#fff',\n      //         PointHoverBackgroundColor: '#fff',\n      //         pointHoverBordeerColor: 'rgba(75,192,192,1)',\n      //     }]\n      // });\n\n      // setChartData({\n      //     labels: Object.keys(groupedByDate),\n      //     datasets: [{\n      //         label: 'Total Transaction Amount',\n      //         data: Object.values(groupedByDate),\n      //         backgroundColor: 'rgba(75,192,192, 0.6)',\n      //         borderColor: 'rgba(75,192,192,1)',\n      //         borderWidth: 1,\n      //         pointBackgroundColor: 'rgba(75,192,192,1)',\n      //         pointBordeerColor: '#fff',\n      //         PointHoverBackgroundColor: '#fff',\n      //         pointHoverBordeerColor: 'rgba(75,192,192,1)',\n      //     }]\n      // });\n\n      // setChartOptions({\n      //     scales: {\n      //         y: {\n      //             type: 'linear',\n      //             min: 0,\n      //             max: Math.max(...Object.values(groupedByDate)) + 5\n      //         }\n      //     }\n      // });\n\n      setChartData({\n        datasets: [\n          {\n            label: \"Total Transaction Amount\",\n            data: dates.map((date, index) => ({ x: date, y: amounts[index] })),\n            backgroundColor: \"rgba(75,192,192, 0.6)\",\n            borderColor: \"rgba(75,192,192,1)\",\n            borderWidth: 1,\n            pointBackgroundColor: \"rgba(75,192,192,1)\",\n            pointBordeerColor: \"#fff\",\n            PointHoverBackgroundColor: \"#fff\",\n            pointHoverBordeerColor: \"rgba(75,192,192,1)\",\n          }]\n      });\n\n      setChartOptions({\n        plugins: {\n            tooltip:{\n                callbacks: {\n                    label\n                }\n            }\n        }\n      })\n    }\n  }, [selectedCustomer, data.transactions]);\n\n  const handleFilterChange = (e) => {\n    const { name, value } = e.target;\n    setFilter({ ...filter, [name]: value });\n  };\n\n  const filteredCustomers = data.customers.filter((customer) =>\n    customer.name.toLowerCase().includes(filter.customerName.toLowerCase())\n  );\n\n  const filteredTransactions = data.transactions.filter(\n    (transaction) =>\n      filter.transactionAmount === \"\" ||\n      transaction.amount === Number(filter.transactionAmount)\n  );\n\n  const handleCustomerClick = (customer) => {\n    setSelectedCustomer(customer);\n  };\n\n  return (\n    <div>\n      <h1>Customer Transactions</h1>\n      <div className=\"customerinput\">\n        <input\n          type=\"text\"\n          name=\"customerName\"\n          placeholder=\"Filter by customer name\"\n          value={filter.customerName}\n          onChange={handleFilterChange}\n        />\n        <input\n          type=\"number\"\n          name=\"transactionAmount\"\n          placeholder=\"Filter by transaction amount\"\n          value={filter.transactionAmount}\n          onChange={handleFilterChange}\n        />\n      </div>\n      <table>\n        <thead>\n          <tr>\n            <th>Customer Name</th>\n            <th>Transaction Date</th>\n            <th>Transaction Amount</th>\n          </tr>\n        </thead>\n        <tbody>\n          {filteredCustomers.map((customer) =>\n            filteredTransactions\n              .filter((transaction) => transaction.customer_id === customer.id)\n              .map((transaction) => (\n                <tr\n                  key={transaction.id}\n                  onClick={() => handleCustomerClick(customer)}\n                >\n                  <td>{customer.name}</td>\n                  <td>{transaction.date}</td>\n                  <td>{transaction.amount}</td>\n                </tr>\n              ))\n          )}\n        </tbody>\n      </table>\n      {selectedCustomer && chartData.labels && chartData.datasets ? (\n        <div className=\"chart-container\">\n          <h2>Transactions for {selectedCustomer.name}</h2>\n          <Line data={chartData} options={chartOptions} />\n        </div>\n      ) : (\n        selectedCustomer && (\n          <div className=\"no-data\">\n            No data available for the selected customer.\n          </div>\n        )\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}